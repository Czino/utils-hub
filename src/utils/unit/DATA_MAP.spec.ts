import { conversionMap } from './conversionMap'

describe('DATA_MAP', () => {
  it('should convert data units', () => {
    expect(conversionMap.data.bit.bit(1000)).toEqual(1000)
    expect(conversionMap.data.bit.nibble(1000)).toEqual(250)
    expect(conversionMap.data.bit.byte(1000)).toEqual(125)
    expect(conversionMap.data.bit.KB(4096)).toEqual(0.5)
    expect(conversionMap.data.bit.MB(1e6)).toEqual(0.119)
    expect(conversionMap.data.bit.GB(1e9)).toEqual(0.116)
    expect(conversionMap.data.bit.TB(1e12)).toEqual(0.114)
    expect(conversionMap.data.bit.PB(1e15)).toEqual(0.111)
    expect(conversionMap.data.bit.EB(1e18)).toEqual(0.108)
    expect(conversionMap.data.bit.ZB(1e21)).toEqual(0.106)
    expect(conversionMap.data.bit.YB(1e24)).toEqual(0.103)

    expect(conversionMap.data.bit.bit(1)).toEqual(1)
    expect(conversionMap.data.nibble.bit(1)).toEqual(4)
    expect(conversionMap.data.byte.bit(1)).toEqual(8)
    expect(conversionMap.data.KB.bit(1)).toEqual(8192)
    expect(conversionMap.data.MB.bit(1)).toEqual(8388608)
    expect(conversionMap.data.GB.bit(1)).toEqual(8589934592)
    expect(conversionMap.data.TB.bit(1)).toEqual(8796093022208)
    expect(conversionMap.data.PB.bit(1)).toEqual(9007199254740992)
    expect(conversionMap.data.EB.bit(1)).toEqual(9223372036854776000)
    expect(conversionMap.data.ZB.bit(1)).toEqual(9.44473296573929e21)
    expect(conversionMap.data.YB.bit(1)).toEqual(9.671406556917033e24)

    expect(conversionMap.data.nibble.bit(1)).toEqual(4)
    expect(conversionMap.data.byte.nibble(1)).toEqual(2)
    expect(conversionMap.data.KB.byte(1)).toEqual(1024)
    expect(conversionMap.data.MB.KB(1)).toEqual(1024)
    expect(conversionMap.data.GB.MB(1)).toEqual(1024)
    expect(conversionMap.data.TB.GB(1)).toEqual(1024)
    expect(conversionMap.data.PB.TB(1)).toEqual(1024)
    expect(conversionMap.data.EB.PB(1)).toEqual(1024)
    expect(conversionMap.data.ZB.EB(1)).toEqual(1024)
    expect(conversionMap.data.YB.ZB(1)).toEqual(1024)
  })
})
