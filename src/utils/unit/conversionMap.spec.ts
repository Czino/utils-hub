/* eslint-disable max-statements */
import { ABSOLUTE_ZERO_ºC, KILO, MEGA } from './constants'
import { conversionMap } from './conversionMap'

describe('conversionMap.temperature', () => {
  it('should convert temperature units', () => {
    expect(conversionMap.temperature.K.K(0)).toEqual(0)
    expect(conversionMap.temperature.K.ºC(0)).toBeCloseTo(ABSOLUTE_ZERO_ºC, 1)
    expect(conversionMap.temperature.K.ºF(0)).toEqual(-459.7)
    expect(conversionMap.temperature.K.ºR(0)).toEqual(0)
    expect(conversionMap.temperature.K.ºRe(0)).toEqual(-218.5)
    expect(conversionMap.temperature.K.ºD(0)).toEqual(-509.7)
    expect(conversionMap.temperature.K.ºN(0)).toEqual(-90.1)
    expect(conversionMap.temperature.K.ºL(0)).toEqual(-20.1)

    expect(conversionMap.temperature.ºC.K(ABSOLUTE_ZERO_ºC)).toEqual(0)
    expect(conversionMap.temperature.ºF.K(-459.67)).toBeCloseTo(0, 1)

    expect(conversionMap.temperature.ºC.ºF(0)).toEqual(32)
    expect(conversionMap.temperature.ºC.ºF(100)).toEqual(212)
    expect(conversionMap.temperature.ºF.ºC(32)).toEqual(0)
    expect(conversionMap.temperature.ºF.ºC(100)).toEqual(37.8)
  })
})
describe('conversionMap.distance', () => {
  it('should convert distance units', () => {
    expect(conversionMap.distance.m.m(1000)).toEqual(1000)
    expect(conversionMap.distance.m.km(1000)).toEqual(1)
    expect(conversionMap.distance.m.dm(1000)).toEqual(10000)
    expect(conversionMap.distance.m.cm(1000)).toEqual(100000)
    expect(conversionMap.distance.m.mm(1000)).toEqual(1000000)
    expect(conversionMap.distance.m.µm(1000)).toEqual(1000000000)
    expect(conversionMap.distance.m.nm(1000)).toEqual(1000000000000)
    expect(conversionMap.distance.m.in(1000)).toEqual(39370.079)
    expect(conversionMap.distance.m.ft(1000)).toEqual(3280.84)
    expect(conversionMap.distance.m.yd(1000)).toEqual(1093.613)
    expect(conversionMap.distance.m.mi(1000)).toEqual(0.621)
    expect(conversionMap.distance.m.nmi(1000)).toEqual(0.54)

    expect(conversionMap.distance.km.m(1000)).toEqual(1000000)
    expect(conversionMap.distance.dm.m(1000)).toEqual(100)
    expect(conversionMap.distance.cm.m(1000)).toEqual(10)
    expect(conversionMap.distance.mm.m(1000)).toEqual(1)
    expect(conversionMap.distance.µm.m(1000)).toEqual(0.001)
    expect(conversionMap.distance.nm.m(1000)).toEqual(0.000001)
    expect(conversionMap.distance.in.m(1)).toEqual(0.0254)
    expect(conversionMap.distance.ft.m(1)).toEqual(0.3048)
    expect(conversionMap.distance.yd.m(1)).toEqual(0.9144)
    expect(conversionMap.distance.mi.m(1)).toEqual(1609.344)
    expect(conversionMap.distance.nmi.m(1)).toEqual(1852)

    expect(conversionMap.distance.km.km(1000)).toEqual(1000)
    expect(conversionMap.distance.dm.km(1000)).toEqual(0.1)
    expect(conversionMap.distance.cm.m(1000)).toEqual(10)
    expect(conversionMap.distance.mm.cm(10)).toEqual(1)
    expect(conversionMap.distance.µm.cm(1000)).toEqual(0.1)
    expect(conversionMap.distance.nm.mm(1000)).toEqual(0.001)
    expect(conversionMap.distance.in.cm(1)).toEqual(2.54)
    expect(conversionMap.distance.ft.cm(1)).toEqual(30.48)
  })
})
describe('conversionMap.weight', () => {
  it('should convert weight units', () => {
    expect(conversionMap.weight.g.g(1000)).toEqual(1000)
    expect(conversionMap.weight.g.kg(1000)).toEqual(1)
    expect(conversionMap.weight.g.t(1000)).toEqual(0.001)
    expect(conversionMap.weight.g.mg(1)).toEqual(1000)
    expect(conversionMap.weight.g.µg(1)).toEqual(1000000)
    expect(conversionMap.weight.g.oz(1)).toEqual(0.035)
    expect(conversionMap.weight.g.lb(1)).toEqual(0.002)
    expect(conversionMap.weight.g.st(1000)).toEqual(0.157)

    expect(conversionMap.weight.kg.g(1)).toEqual(1000)
    expect(conversionMap.weight.t.g(1)).toEqual(1000000)
    expect(conversionMap.weight.mg.g(1000)).toEqual(1)
    expect(conversionMap.weight.µg.g(1000)).toEqual(0.001)
    expect(conversionMap.weight.oz.g(1)).toEqual(28.349523125)
    expect(conversionMap.weight.lb.g(1)).toEqual(453.59237)
    expect(conversionMap.weight.st.g(1)).toEqual(6350.29318)

    expect(conversionMap.weight.kg.t(1000)).toEqual(1)
    expect(conversionMap.weight.t.kg(1)).toEqual(1000)
    expect(conversionMap.weight.mg.µg(1)).toEqual(1000)
    expect(conversionMap.weight.µg.g(1000000)).toEqual(1)
    expect(conversionMap.weight.oz.lb(16)).toEqual(1)
  })
})
describe('conversionMap.volume', () => {
  it('should convert volume units', () => {
    expect(conversionMap.volume['m³']['m³'](1000)).toEqual(1000)
    expect(conversionMap.volume['m³']['dm³'](1)).toEqual(1000)
    expect(conversionMap.volume['m³']['cm³'](1)).toEqual(1e6)
    expect(conversionMap.volume['m³']['mm³'](1)).toEqual(1e9)
    expect(conversionMap.volume['m³']['µm³'](1)).toEqual(1e18)
    expect(conversionMap.volume['m³']['nm³'](1)).toEqual(1e27)
    expect(conversionMap.volume['m³']['km³'](1e9)).toEqual(1)
    expect(conversionMap.volume['m³'].L(1)).toEqual(1000)
    expect(conversionMap.volume['m³'].mL(1)).toEqual(1000000)

    expect(conversionMap.volume['m³']['m³'](1000)).toEqual(1000)
    expect(conversionMap.volume['dm³']['m³'](1000)).toEqual(1)
    expect(conversionMap.volume['cm³']['m³'](1e6)).toEqual(1)
    expect(conversionMap.volume['mm³']['m³'](1e9)).toEqual(1)
    expect(conversionMap.volume['µm³']['m³'](1e18)).toEqual(1)
    expect(conversionMap.volume['nm³']['m³'](1e27)).toEqual(1)
    expect(conversionMap.volume['km³']['m³'](1)).toEqual(1e9)
    expect(conversionMap.volume.L['m³'](1000)).toEqual(1)
    expect(conversionMap.volume.mL['m³'](1000000)).toEqual(1)

    expect(conversionMap.volume.L['dm³'](1)).toEqual(1)
    expect(conversionMap.volume['cm³']['mm³'](1)).toEqual(1000)
  })
})
describe('conversionMap.pressure', () => {
  it('should convert pressure units', () => {
    expect(conversionMap.pressure.Pa.Pa(1000)).toEqual(1000)
    expect(conversionMap.pressure.Pa.kPa(KILO)).toEqual(1)
    expect(conversionMap.pressure.Pa.MPa(MEGA)).toEqual(1)
    expect(conversionMap.pressure.Pa.bar(MEGA)).toEqual(10)
    expect(conversionMap.pressure.Pa.atm(MEGA)).toEqual(9.869)
    expect(conversionMap.pressure.Pa.mmHg(MEGA)).toEqual(7500.638)
    expect(conversionMap.pressure.Pa.psi(MEGA)).toEqual(145.038)
    expect(conversionMap.pressure.Pa.torr(MEGA)).toEqual(7500.638)
    expect(conversionMap.pressure.Pa.at(MEGA)).toEqual(10.197)
    expect(conversionMap.pressure.Pa.psf(MEGA)).toEqual(20885.416)

    expect(conversionMap.pressure.kPa.Pa(1)).toEqual(KILO)
    expect(conversionMap.pressure.MPa.Pa(1)).toEqual(MEGA)
    expect(conversionMap.pressure.bar.Pa(1)).toEqual(100000)
    expect(conversionMap.pressure.atm.Pa(1)).toEqual(101325)
    expect(conversionMap.pressure.mmHg.Pa(1)).toEqual(133.322)
    expect(conversionMap.pressure.psi.Pa(1)).toEqual(6894.76)
    expect(conversionMap.pressure.torr.Pa(1)).toEqual(133.322)
    expect(conversionMap.pressure.at.Pa(1)).toEqual(98066.5)
    expect(conversionMap.pressure.psf.Pa(1)).toEqual(47.8803)

    expect(conversionMap.pressure.mmHg.torr(1)).toEqual(1)
    expect(conversionMap.pressure.mmHg.atm(760)).toEqual(1)
  })
})
